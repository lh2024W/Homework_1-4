// Homework_14.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
using namespace std;

void AddLastElement(int** ar, int* count);
void DeleteLastElement(int** ar, int* count);

int main()

{
	/*Задание 1. Создать переменную типа инт, указатель на нее, указатель на указатель,
		тройной указатель, 4* - указатель и 5* - указатель.
		Показать адреса всех элементов этой цепочки (всего 6 элементов), используя &.
		Затем показать адреса всех элементов этой цепочки, используя толькo 5* - указатель.*/
		/*
		int a = 2;

		int* p = &a;
		int** p2 = &p;
		int*** p3 = &p2;
		int**** p4 = &p3;
		int***** p5 = &p4;

		cout << "Adress a: " << &a << "\n";
		cout << "Adress p: " << &p << "\n";
		cout << "Adress p2: " << &p2 << "\n";
		cout << "Adress p3: " << &p3 << "\n";
		cout << "Adress p4: " << &p4 << "\n";
		cout << "Adress p5: " << &p5 << "\n\n\n";

		cout << "Adress a: " << &(*****p5) << "\n";
		cout << "Adress p: " << (& (*****p5)) + 9 << "\n";
		cout << "Adress *p: " << (&(*****p5)) + 17 << "\n";
		cout << "Adress **p: " << (&(*****p5)) + 25 << "\n";
		cout << "Adress ***p: " << (&(*****p5)) + 33 << "\n";
		cout << "Adress ****p: " << (&(*****p5)) + 41 << "\n";
		*/

		/*Задание 2. К функциям AllocateMemory, RandomFillArray, PrintArray и FreeMemory,
			добавить еще две функции:
		- функцию добавления элемента в конец массива, которая будет принимать два параметра
			(указатель на одномерный массив и целое число)
		- функцию удаления элемента с конца массива, которая будет принимать один параметр
			(указатель на одномерный массив)
		Протестировать эти две функции в мейне, вызвать по несколько раз, с распечаткой элементов массива.
			*/

	int size = 5;
	int* ar = new int[size];
	for (size_t i = 0; i < size; i++)
	{
		ar[i] = rand() % 100;
		cout << ar[i] << ", ";
	}
	cout << "\n\n";

	AddLastElement(&ar, &size);
	for (size_t i = 0; i < size; i++)
	{
		cout << ar[i] << ", ";
	}

	DeleteLastElement(&ar, &size);

	cout << "\n\n";
	for (size_t i = 0; i < size; i++)
	{
		cout << ar[i] << ", ";
	}

}


void AddLastElement(int** ar, int* count) {
	int size = *count;

	if (size <= 0) return;

	if (*ar != nullptr) {

		int* temp = new int[size + 1];

		for (int i = 0; i < size + 1; ++i)
			temp[i] = (*ar)[i];
		temp[size] = rand() % 100;

		*ar = temp;

		*count = size + 1;
	}

}

void DeleteLastElement(int** ar, int* count) {
	int size = *count;

	if (size <= 0) return;

	if (*ar != nullptr) {

		int* temp = new int[size - 1];

		for (int i = 0; i < size - 1; ++i)
			temp[i] = (*ar)[i];

		delete[](*ar);
		*ar = temp;

		*count = size - 1;
	}
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
